#!/bin/bash

TEST_DIR="test_cases"
EXEC_DIR="../src"
TMP_DIR="/tmp"

RED='\033[0;31m'
GREEN='\033[0;32m'
NOCOLOR='\033[0m'
DIM='\e[2m'
TICK='\u2713'
CROSS='\u2717'

function cleanup() {
    rm -f $TMP_DIR/compiler_stderr $TMP_DIR/interpreter_stderr $TMP_DIR/output
}

verbose=""
[ "$1" ] && [ "$1" = "-v" ] || [ "$1" = "--verbose" ] && verbose="1"

numTests=0
numTestsPassed=0

for test in "$TEST_DIR"/*; do
    passed=''
    expectedReturn="$(cat "$test"/return)"

    # Run the compiler
    ./$EXEC_DIR/compiler <"$test"/program.tl >$TMP_DIR/out.IFJcode21 2>$TMP_DIR/compiler_stderr
    compilerReturn=$?

    # Did the compiler finish successfully?
    if [ $compilerReturn -eq 0 ]
    then
        # Run the interpreter
        ./$EXEC_DIR/ic21int $TMP_DIR/out.IFJcode21 <"$test"/input >$TMP_DIR/output 2>$TMP_DIR/interpreter_stderr
        interpreterReturn=$?

        # Did the interpreter finish successfully?
        if [ $interpreterReturn -eq 0 ]
        then
            # Does the output match with reference? Expected return must be zero.
            diff --strip-trailing-cr "$TMP_DIR/output" "$test"/output >$TMP_DIR/diff_output \
            && [ "$(cat "$test"/return)" -eq 0 ] \
            && passed='1'
        else
            # Does the runtime error match with reference?
            [ $interpreterReturn -eq "$expectedReturn" ] && passed='1'
        fi
    else
        # Does the compiler error match the reference?
        [ $compilerReturn -eq "$expectedReturn" ] && passed='1'
    fi

    if [ $passed ]; then
        echo -e "$GREEN$TICK $(basename "$test")$NOCOLOR"
        numTestsPassed=$((numTestsPassed+1))
    else
        echo -e "$RED$CROSS $(basename "$test")$NOCOLOR"
        # Print this only in verbose mode
        echo -ne "$DIM"

        if [ $verbose ]
        then
            # Print more detailed error info
            if [ "$expectedReturn" -eq 0 ]
            then
                if [ $compilerReturn -ne 0 ]
                then
                    echo "Compiler exited with error $compilerReturn:"
                    cat $TMP_DIR/compiler_stderr
                else
                    if [ $interpreterReturn -ne 0 ]
                    then
                        echo "Interpreter exited with error $interpreterReturn:"
                        cat $TMP_DIR/interpreter_stderr
                    else
                        echo Expected output:
                        cat "$test"/output
                        echo Output:
                        cat $TMP_DIR/output
                    fi
                fi
            else
                echo "Program was supposed to fail, but with different exit code"
                echo "Expected return: $expectedReturn" \
                && echo "Compiler return: $compilerReturn" \
                && [ $compilerReturn -eq 0 ] && echo "Interpreter return: $interpreterReturn"
            fi
            echo -ne "$NOCOLOR"
        fi
    fi
    numTests=$((numTests+1))
done

# After all tests, print summary
if [ $numTestsPassed -eq $numTests ]
then
    echo -e "\n$GREEN$TICK ALL TESTS PASSED$NOCOLOR"
else
    echo -e "\n$RED$CROSS SOME TESTS FAILED ($numTestsPassed/$numTests passed)$NOCOLOR"
    [ -z $verbose ] && echo -e "${DIM}Run with -v | --verbose to outputs of failed tests.$NOCOLOR"
    echo -ne "$NOCOLOR"
fi
